;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Overall configuration of adaptive difficulty
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[ShockGame.DifficultyManager]

; Turn on/off creation of the session file. Doesn't affect stats gathering
; or adaptive difficulty
EnableSessionLogging=false

; Turn on/off adaptive difficulty system. This doesn't affect the stats
; gathering or session logging
EnableAdaptiveDifficulty=true

; Tuning variables are specified in Low, Normal or High variety
; to correspond to the DifficultySetting.
;
; Possible values are:
;	DIFFICULTY_Low
;	DIFFICULTY_Normal
;	DIFFICULTY_High
;
DifficultySetting=DIFFICULTY_Normal

; List of objects that adaptive difficulty wouldn't spawn stuff in
NoDifficultySpawnClassNames=MeleeThugClub
NoDifficultySpawnClassNames=Gatherer
NoDifficultySpawnClassNames=BotMiniGun
NoDifficultySpawnClassNames=TurretMiniGun
NoDifficultySpawnClassNames=TurretFlameThrower
NoDifficultySpawnClassNames=TurretRPG
NoDifficultySpawnClassNames=RangedAggressorPistolWeapon
NoDifficultySpawnClassNames=RosieRangedWeapon
NoDifficultySpawnClassNames=RosieEliteRangedWeapon
NoDifficultySpawnClassNames=RangedAggressorMachineGun
NoDifficultySpawnClassNames=GrenadeBox
NoDifficultySpawnClassNames=GrenadeBoxMolotov
NoDifficultySpawnClassNames=SpawnedSecurityCamera
NoDifficultySpawnClassNames=SecurityBot
NoDifficultySpawnClassNames=Turret

; List of objects that adaptive difficulty wouldn't take stuff OUT of

NoDifficultyRemoveClassNames=PistolAndStandardBullet
NoDifficultyRemoveClassNames=ShotgunAnd00Buck
NoDifficultyRemoveClassNames=CrossbowAndStandardBolt
NoDifficultyRemoveClassNames=ChemicalThrowerAndNapalm
NoDifficultyRemoveClassNames=GrenadeLauncherAndFragGrenades
NoDifficultyRemoveClassNames=MachineGunAndStandardBullet


; List of advisors that will suggest adjustments to the game
; Programmer will place all possible advisors here and designer 
; can comment out un-needed advisors
AdvisorClasses=class'Shockgame.HealthAdvisor'
AdvisorClasses=class'Shockgame.BioAmmoAdvisor'
AdvisorClasses=class'Shockgame.AmmoAdvisor'
AdvisorClasses=class'Shockgame.FrequentDeathAdvisor'

; List of adjustments that will actually be used affect the game
; Programmer will place all possible adjustments here and designer 
; can comment out un-needed adjustments. If an adjustment is 
; commented out and is recommended by an advisor above, it wouldn't
; take effect
;
AdjustmentClasses=class'Shockgame.SpawnMedHypoAdjustment'
AdjustmentClasses=class'Shockgame.SpawnBioAmmoAdjustment'
AdjustmentClasses=class'Shockgame.SpawnAmmoAdjustment'
AdjustmentClasses=class'Shockgame.RemoveMedHypoAdjustment'
AdjustmentClasses=class'Shockgame.RemoveBioAmmoAdjustment'
AdjustmentClasses=class'Shockgame.RemoveAmmoAdjustment'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Stats gathering parameters
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[ShockGame.DifficultyStatsManager]

; How often to take a snapshot of player's stats in seconds, 0 means don't take time based snapshots
; but instead take a snapshot when player opens a container
SnapshotRate=0

; Configure how stats are gathered on the player
;----------------------------------------------------------------------
; MaxSamples: how many samples to keep for calculating the stats
;
; StatType: how to calculate the value of the stat
; 	STAT_AVERAGE is averaging all the samples
; 	STAT_DURATION is the difference between the earliest sample time and the latest sample times
;
; BonusPerCredit: how much the amount of credits that the player has will affect the stat.
; 	If the player has 100 credits, and the BonusPerCredit is .1, then the stat will
;	10 more than if calculated without the bonus

HealthStats=(MaxSamples=(Low=4,Normal=4,High=4), FriendlyName="Current Health", BonusPerCredit=0.03, StatType=STAT_AVERAGE)

TotalHealthStats=(MaxSamples=(Low=4,Normal=4,High=4), FriendlyName="Total Health", BonusPerCredit=0.03, StatType=STAT_AVERAGE)

MedHypoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Med Hypo", StatType=STAT_AVERAGE)

BioAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="BioAmmo", BonusPerCredit=0.025, StatType=STAT_AVERAGE)

TotalBioAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Total BioAmmo", BonusPerCredit=0.025, StatType=STAT_AVERAGE)

BioAmmoHypoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="BioAmmo Hypo", StatType=STAT_AVERAGE)

CreditsStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Credits", StatType=STAT_AVERAGE)

PistolAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Pistol Ammo", BonusPerCredit=0.08, StatType=STAT_AVERAGE)
ShotgunAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Shotgun Ammo", BonusPerCredit=0.05, StatType=STAT_AVERAGE)
CrossbowAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Crossbow Ammo", BonusPerCredit=0.09, StatType=STAT_AVERAGE)
ChemicalThrowerAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Chemical Thrower Ammo", BonusPerCredit=0.44, StatType=STAT_AVERAGE)
MachineGunAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Machine Gun Ammo", BonusPerCredit=0.33, StatType=STAT_AVERAGE)
GrenadeLauncherAmmoStats=(MaxSamples=(Low=5,Normal=5,High=5), FriendlyName="Grenade Launcher Ammo", BonusPerCredit=0.025, StatType=STAT_AVERAGE)


DeathReloadStats=(MaxSamples=(Low=1,Normal=2,High=3), FriendlyName="Death/Reload", StatType=STAT_DURATION)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Advisors
;
; Advisors have two main components, an algorithm to decide if the game
; is too difficulty or too easy (an ease value), and a list of
; recommended adjustments to try and correct the situation.
;
; The algorithm is called the DifficultyEvaulator, and the advisor
; selects the type and name of DifficultyEvaulator to use
;
; There are currently two types of evaulators. 
;	ThresholdEvaluator - return -1 when the value is less than the threshold
;	EaseTableEvaulator - returns an easy value by looking up an ease table
;
; An advisor returns one recommendation chosen randomly from the list of
; AdjustmentRecommendations. The fields of a recommendations are:
; 	AdjustmentClass - the type of adjustment to use
;	ProbabilityTableName - look up the ease value in this table used 
;			       to determine the probability of the adjustment firing,
;	Count - the max number of times an adjustment fires. This is reset when the adjustment is
;		not recommended anymore. Used to prevent exploit. (May not work well in practice, needs more thought)
;	Weight - The weight determines how often a recommendation is picked from the list of AdjustmentRecommendations
;		 This is a relative weight against the other recommendations in the list. The sign of the weight
;		 is important, as a negative weight recommendation will only be picked if the ease value is negative
;		 This is so the same advisor can recommend to spawn a hypo when too difficult and remove a hypo when
;		 too easy
;	Priority - a priority to rank this against all the other recommendations by other advisors, this affects
;		   the order an adjustment is used. For example, spawning medhypo is more important than spawning
;		   bioammo, so put it at a higher priority would mean it get first chance to fill in an empty slot
;		   in a container.
; 
; MaxEaseDifferenceDueToCreditBonus is the maximum difference between evaluating the difficulty with credits factored in
; 	and without credits, before the training system is notified, and should tell the player to use some of their
;	credits
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[ShockGame.HealthAdvisor]

DifficultyEvaluatorClass=class'ShockGame.EaseTableEvaluator'
DifficultyEvaluatorName=HealthEaseTableEvaluator

; Recommend spawning a hypo when too difficult
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnMedHypoAdjustment', ProbabilityTableName=DefaultProbabilityTable, Count=10, Weight=-1.0, Priority=10)
; Recommend removing a hypo when too easy
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.RemoveMedHypoAdjustment', ProbabilityTableName=DefaultProbabilityTable, Weight=1.0, Priority=9)

; Remove after next release
; If credits will increase the ease level by 2, then notify training
MaxEaseDifferenceDueToCreditBonus=2

; If health is low and the player has more than this many credits then notify training
CreditsNeededToBeConsideredRich=100

AdvisorCategory=Health

[ShockGame.BioAmmoAdvisor]

DifficultyEvaluatorClass=class'ShockGame.EaseTableEvaluator'
DifficultyEvaluatorName=BioAmmoEaseTableEvaluator

; Recommend spawning a hypo
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnBioAmmoAdjustment', ProbabilityTableName=BioAmmoProbabilityTable, Count=10, Weight=-1.0, Priority=5)
; Recommend removing a hypo when too easy
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.RemoveBioAmmoAdjustment', ProbabilityTableName=DefaultProbabilityTable, Weight=1.0, Priority=4)

; Remove after next release
; If credits will increase the ease level by 2, then notify training
MaxEaseDifferenceDueToCreditBonus=2

; If bioammo is low and the player has more than this many credits then notify training
CreditsNeededToBeConsideredRich=100

AdvisorCategory=Bioammo

[ShockGame.AmmoAdvisor]

DifficultyEvaluatorClass=class'ShockGame.AmmoEaseTablesEvaluator'
DifficultyEvaluatorName=AmmoEaseTablesEvaluator

; Recommend spawning some ammo
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnAmmoAdjustment', ProbabilityTableName=DefaultProbabilityTable, Count=10, Weight=-1.0, Priority=4)
; Recommend removing some ammo
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.RemoveAmmoAdjustment', ProbabilityTableName=DefaultProbabilityTable, Weight=1.0, Priority=3)

; Remove after next release
; If credits will increase the ease level by 2, then notify training
MaxEaseDifferenceDueToCreditBonus=2

; If ammo is low and the player has more than this many credits then notify training
CreditsNeededToBeConsideredRich=100

AdvisorCategory=Ammo

[ShockGame.FrequentDeathAdvisor]

; If player dies multiple times in this many seconds or less, then we consider the game too difficult
; the number of times we care about is determined by the DeathReloadStats.MaxSamples
MaxDeathDuration=(Low=2000, Normal=1200, High=300)

; How long should the player be alive before we stop considering death too frequent
; 15 minutes for low difficulty
; 5 minutes for normal difficulty
; 2 minutes for high difficulty
AliveDuration=(Low=900, Normal=300, High=120) 

; Recommend spawning everything randomly

AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnMedHypoAdjustment', ProbabilityTableName=DeathProbabilityTable, Count=4, Weight=-1.0, Priority=10)
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnAmmoAdjustment', ProbabilityTableName=DeathProbabilityTable, Count=4, Weight=-1.0, Priority=4)
AdjustmentRecommendations=(AdjustmentClass=class'ShockGame.SpawnBioAmmoAdjustment', ProbabilityTableName=DeathProbabilityTable, Count=4, Weight=-1.0, Priority=5)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Probability Tables
;
; Used by recommendations to find the probability an adjustment fires
; given an ease value.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Default probability that all un-tuned recommendation uses
[DeathProbabilityTable]
Entries=(EaseValue=-3, Value=(Low=0.99,Normal=0.7,High=0.5))
Entries=(EaseValue=-2, Value=(Low=0.9,Normal=0.6,High=0.4))
Entries=(EaseValue=-1, Value=(Low=0.8,Normal=0.5,High=0.3))
Entries=(EaseValue=0, Value=(Low=0,Normal=0,High=0))
Entries=(EaseValue=1, Value=(Low=0.5,Normal=0.5,High=0.3))
Entries=(EaseValue=2, Value=(Low=0.8,Normal=0.6,High=0.4))
Entries=(EaseValue=3, Value=(Low=0.95,Normal=0.7,High=0.5))

[DefaultProbabilityTable]
Entries=(EaseValue=-3, Value=(Low=0.99,Normal=0.99,High=0.95))
Entries=(EaseValue=-2, Value=(Low=0.9,Normal=0.85,High=0.65))
Entries=(EaseValue=-1, Value=(Low=0.8,Normal=0.7,High=0.5))
Entries=(EaseValue=0, Value=(Low=0,Normal=0,High=0))
Entries=(EaseValue=1, Value=(Low=0.5,Normal=0.5,High=0.5))
Entries=(EaseValue=2, Value=(Low=0.8,Normal=0.8,High=0.8))
Entries=(EaseValue=3, Value=(Low=0.95,Normal=0.95,High=0.95))

[BioAmmoProbabilityTable]
Entries=(EaseValue=-3, Value=(Low=0.99,Normal=0.99,High=0.95))
Entries=(EaseValue=-2, Value=(Low=0.9,Normal=0.85,High=0.8))
Entries=(EaseValue=-1, Value=(Low=0.8,Normal=0.7,High=0.5))
Entries=(EaseValue=0, Value=(Low=0,Normal=0,High=0))
Entries=(EaseValue=1, Value=(Low=0.5,Normal=0.5,High=0.5))
Entries=(EaseValue=2, Value=(Low=0.8,Normal=0.8,High=0.8))
Entries=(EaseValue=3, Value=(Low=0.95,Normal=0.95,High=0.95))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Ease Lookup Tables
;
; Used by EaseTableEvaluators to return an ease value
; they are specified the same way as probability tables
; but are used to lookup ease value.
; So HealthToEaseTable will take the current player health pct 
; and lookup the ease value associated with it.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[HealthToEaseTable]
Entries=(EaseValue=-3, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=-2, Value=(Low=2.0,Normal=0.85,High=0.33))
Entries=(EaseValue=-1, Value=(Low=4.0,Normal=1.2,High=0.66))
Entries=(EaseValue=0, Value=(Low=6.0,Normal=1.75,High=1.0))
Entries=(EaseValue=1, Value=(Low=8.0,Normal=2.5,High=1.5))
Entries=(EaseValue=2, Value=(Low=9.0,Normal=4.0,High=2.0))
Entries=(EaseValue=3, Value=(Low=9.99,Normal=6.0,High=3.0))


[BioAmmoToEaseTable]
Entries=(EaseValue=-3, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=-2, Value=(Low=2.0,Normal=0.66,High=0.33))
Entries=(EaseValue=-1, Value=(Low=4.0,Normal=0.1,High=0.66))
Entries=(EaseValue=0, Value=(Low=6.0,Normal=1.5,High=1.0))
Entries=(EaseValue=1, Value=(Low=8.0,Normal=2.5,High=1.5))
Entries=(EaseValue=2, Value=(Low=9.0,Normal=4.0,High=2.0))
Entries=(EaseValue=3, Value=(Low=9.99,Normal=6.0,High=3.0))

[AmmoToEaseTable]
Entries=(EaseValue=-3, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=-2, Value=(Low=3000.0,Normal=500.0,High=400.0))
Entries=(EaseValue=-1, Value=(Low=5000.0,Normal=1000.0,High=1000.0))
Entries=(EaseValue=0, Value=(Low=7000.0,Normal=2500.0,High=2000.0))
Entries=(EaseValue=1, Value=(Low=12000.0,Normal=8000.0,High=7500.0))
Entries=(EaseValue=2, Value=(Low=15000.0,Normal=11000.0,High=9000.0))
Entries=(EaseValue=3, Value=(Low=20000.0,Normal=15000.0,High=12000.0))

[WeaponAverageToEaseTable]
Entries=(EaseValue=-3, Value=(Low=-1.0,Normal=-1.0,High=-1.0))
Entries=(EaseValue=-2, Value=(Low=0.5,Normal=0.2,High=0.1))
Entries=(EaseValue=-1, Value=(Low=1.2,Normal=0.4,High=0.2))
Entries=(EaseValue=0, Value=(Low=1.5,Normal=0.9,High=0.3))
Entries=(EaseValue=1, Value=(Low=2.0,Normal=1.1,High=0.4))
Entries=(EaseValue=2, Value=(Low=2.3,Normal=1.3,High=0.5))
Entries=(EaseValue=3, Value=(Low=2.7,Normal=1.5,High=0.6))

[PistolAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=5,Normal=5,High=5))
Entries=(EaseValue=1, Value=(Low=10,Normal=10,High=10))
Entries=(EaseValue=2, Value=(Low=16,Normal=16,High=16))
Entries=(EaseValue=3, Value=(Low=20,Normal=20,High=20))

[ShotgunAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=3,Normal=3,High=3))
Entries=(EaseValue=1, Value=(Low=7,Normal=7,High=7))
Entries=(EaseValue=2, Value=(Low=11,Normal=11,High=11))
Entries=(EaseValue=3, Value=(Low=17,Normal=17,High=17))

[CrossbowAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=4,Normal=4,High=4))
Entries=(EaseValue=1, Value=(Low=7,Normal=7,High=7))
Entries=(EaseValue=2, Value=(Low=11,Normal=11,High=11))
Entries=(EaseValue=3, Value=(Low=16,Normal=16,High=16))

[ChemicalThrowerAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=21,Normal=21,High=21))
Entries=(EaseValue=1, Value=(Low=41,Normal=41,High=41))
Entries=(EaseValue=2, Value=(Low=81,Normal=81,High=81))
Entries=(EaseValue=3, Value=(Low=121,Normal=121,High=121))

[MachineGunAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=9,Normal=9,High=9))
Entries=(EaseValue=1, Value=(Low=15,Normal=15,High=15))
Entries=(EaseValue=2, Value=(Low=31,Normal=31,High=31))
Entries=(EaseValue=3, Value=(Low=51,Normal=51,High=51))

[GrenadeLauncherAmmoToEaseTable]
Entries=(EaseValue=-1, Value=(Low=0.0,Normal=0.0,High=0.0))
Entries=(EaseValue=0, Value=(Low=2,Normal=2,High=2))
Entries=(EaseValue=1, Value=(Low=4,Normal=4,High=4))
Entries=(EaseValue=2, Value=(Low=6,Normal=6,High=6))
Entries=(EaseValue=3, Value=(Low=9,Normal=9,High=9))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Evaluators Per Object Configuration
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


[HealthThresholdEvaluator]
; the thresholds are for the ratio of total health  to max health
Thresholds=(Low=.25,Normal=.15,High=.1)

[BioAmmoThresholdEvaluator]
; the thresholds are for the ratio of total bioammo to max bioammo
Thresholds=(Low=.5,Normal=.3,High=.1)

[AmmoThresholdEvaluator]
; the threshold is for the damage potential
Thresholds=(Low=50,Normal=30,High=10)


[HealthEaseTableEvaluator]
; Use this named table to map health / max health to an ease value
EaseTableName=HealthToEaseTable

[BioAmmoEaseTableEvaluator]
; Use this named table to map bio ammo / max bio ammo to an ease value
EaseTableName=BioAmmoToEaseTable

[AmmoEaseTablesEvaluator]
; Use this named table to map averaged weapon score to an ease value
EaseTableName=WeaponAverageToEaseTable
WeaponEaseTableNames=PistolAmmoToEaseTable
WeaponEaseTableNames=ShotgunAmmoToEaseTable
WeaponEaseTableNames=CrossbowAmmoToEaseTable
WeaponEaseTableNames=ChemicalThrowerAmmoToEaseTable
WeaponEaseTableNames=MachineGunAmmoToEaseTable
WeaponEaseTableNames=GrenadeLauncherAmmoToEaseTable

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Adjustments
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[ShockGame.SpawnMedHypoAdjustment]
; The Min and Max rate define  a randomly
; selected time that a med hypo will spawn
; 
MinSpawnRate=(Low=30.0, Normal=100.0, High=280.0)
MaxSpawnRate=(Low=60.0, Normal=140.0, High=320.0)
MinStackSize=1
MaxStackSize=1

[ShockGame.SpawnBioAmmoAdjustment]
; The Min and Max rate define  a randomly
; selected time that a bioammo hypo will spawn
; 
MinSpawnRate=(Low=30.0, Normal=100.0, High=280.0)
MaxSpawnRate=(Low=60.0, Normal=140.0, High=320.0)
MinStackSize=1
MaxStackSize=1

[ShockGame.SpawnAmmoAdjustment]
; The Min and Max rate define  a randomly
; selected time that an ammo stack will spawn
; 
MinSpawnRate=(Low=30.0, Normal=100.0, High=280.0)
MaxSpawnRate=(Low=60.0, Normal=140.0, High=320.0)
; How many of each type of weapon's ammo to spawn per level
; Default is used if the current level's label doesn't match any
; other in the list
AmmoStackSizes=(Level=Default, PistolAmmoStackSize=8, ShotGunAmmoStackSize=6, ChemicalThrowerAmmoStackSize=50, CrossbowAmmoStackSize=5, GrenadeLauncherAmmoStackSize=3)

[ShockGame.RemoveItemsAdjustment]
RemoveItemClasses=class'ShockDesignerClasses.MedHypo'