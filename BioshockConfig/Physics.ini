;;
;;  Physics.ini
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  MOMENTUM PARAMETERS FOR REACTIVE ACTORS
;;
;;  These parameters define the way that reactive actors will 
;;  behave in response to momentum imparted from weapons. The
;;  main point of this system is that actors should behave in
;;  a stable way regardless of the weapon used or the size of
;;  the actor. To make sure this happens the speed of all
;;  reactive actors is restricted to a maximum value. This is
;;  the 'MaximumSpeedOfAnyObject' parameter. No reactive
;;  actor can move faster than this speed when affected by a
;;  weapon. 
;;  
;;  Limiting the speed of reactive actors is not enough to 
;;  ensure their behavior is stable and does not result in 
;;  behavior that looks good. Heavier object should appear to
;;  be less affected than lighter object. Also, this system
;;  does not control how Havok object interact with one 
;;  another, only how weapons affect Havok objects. So a heavy
;;  object that collides with a light object is going to cause
;;  the light object to move with a much greater speed than the
;;  heavy object. This can result in unstable behavior, which
;;  we are trying to avoid. 
;;
;;  To limit the maximum speed of heavy object another restriction
;;  is introduced, this one is proportional to the mass of the
;;  reactive actor affected. We define a heavy object using the
;;  'ReferenceMass' parameter. In the following examples the
;;  parameter values used are:
;;      ReferenceMass = 1000 kg
;;      MaximumSpeedOfReferenceMass = 0.1 m/s
;;      MaximumSpeedOfAnyObject = 10 m/s
;; 'ReferenceMass' is currently set to 1000.0 kg, and actors of 
;;  this size cannot move faster than the speed defined by 
;;  'MaximumSpeedOfReferenceMass'. If an actors mass is 500kg, 
;;  its maximum speed is twice the value of  
;;  'MaximumSpeedOfReferenceMass', i.e. ( 1000.0kg / 500.0kg ) *
;;  MaximumSpeedOfReferenceMass. Similarly, if the actors has a
;;  mass of 100kg, its maximum speed is ( 1000 / 100 ) *
;;  MaximumSpeedOfReferenceMass, i.e. 10x faster than the reference
;;  mass. If the actor weights less than 10kg, this calculation
;;  gives a value that is greater than 10m/s, however this is
;;  larger than 'MaximumSpeedOfAnyObject', so we use the smaller
;;  of the two values, i.e. no object smaller than 10kg can move
;;  faster than 10m/s.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[ReactiveActor]
ReferenceMass=1000.0f
MaximumSpeedOfReferenceMass=0.75f
MaximumSpeedOfAnyObject=30.0f

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  MOMENTUM PARAMETERS FOR AI (MESHES)
;;
;;  These parameters define the way that bioshock AI will 
;;  respond to momentum imparted from weapons. The parameters
;;  are defined with respect to the AIs mesh. E.g. two aggressors
;;  with different meshes will respond to ammo impact according
;;  to the meshes they are using. When the follow description 
;;  mentions "AI", think "the mesh of the AI".
;;
;;  As with reactive actors (see above), the speed of the AI is 
;;  restricted to ensure that they remain stable. 'MaxDamageReactionSpeed' 
;;  defines the maximum speed that a given AI can move in response 
;;  to an impulse imparted by a weapon.
;;
;;  The momentum imparted by a weapon is defined by its 
;;  'MomentumScale' parameter (see 'Weapons.ini' file). The 
;;  'MomentumScale' is typically a number between 1 and 10,
;;  where 1 is weak and 10 is powerful. The 'BaseDamageReactionSpeed'
;;  parameter defines how fast an AI will move in response
;;  to a weapon with a 'MomentumScale' of 1. The 'MomentumScale'
;;  multiplies the 'BaseDamageReactionSpeed' to determine how
;;  much the AI responds to the impact. The actual reaction
;;  speed is the smaller of MomentumScale * BaseDamageReactionSpeed
;;  and MaxDamageReactionSpeed. So the reaction speed is
;;  never greater than MaxDamageReactionSpeed.
;;
;;  (NOTE: All parameter values are in metres-per-second.)
;;
;;
;;  Added 10/11/2006
;;  There are three new parameters added to each of the
;;  meshes: MinimumCollisionVelocity, CollisionDamageRatio, and
;;  SkeletalMass. These parameters define how much damage an AI
;;  will take from an object thrown with telekinesis.
;;
;;  SkeletalMass: This is just a number that represents the mass
;;  of the AI. It is not related to the mass of the bones in the
;;  AIs ragdoll, so collision damage can be tuned without being
;;  affected by changes in the ragdoll. The mass is roughly in
;;  kilograms.
;;
;;  MinimumCollisionVelocity: This is a threshold based on the
;;  concept of a 'collision velocity.' The collision velocity is the
;;  velocity that the AI would get from a collision if all of the
;;  momentum was transfered from the thrown object to the AI. This 
;;  amount depends on the mass of the object that is thrown and the
;;  mass of the AI, and means that the collision velocity of two
;;  objects moving at the same speed will be different if their
;;  masses are different. Similarly, an object thrown at different
;;  AI will affect the AI differently if their masses are different.
;;  So, for instance, the gatherer will be more affected than a
;;  protector would because she has much less mass. The 
;;  MinimumCollisionVelocity is a threshold that an object must
;;  exceed before it can do any damage. 
;;
;;  CollisionDamageRatio: This parameter controls how the collision
;;  velocity (see above) is translated into damage. The damage imparted
;;  to an AI is CollisionDamageRatio * ( CollisionVelocity - 
;;  MinimumCollisionVelocity ). So, the larger the CollisionDamageRatio,
;;  the greater the damage done to the AI. This can be thought of as
;;  how sensitive the AI is to damage from thrown objects.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; defaults for meshes not specifically overridden below
[MeshDefaults]
BaseDamageReactionSpeed=3.0f
MaxDamageReactionSpeed=50.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=2.0f
SkeletalMass=100.0f

;; Telekinesis specific collision parameters
TelekinesisCollisionDamageRatio=2.0f
TelekinesisMinimumCollisionVelocity=0.0f
TelekinesisCollisionDamageMaximum=1500.0f

;; Springboard trap specific collision parameters
SpringBoardTrapCollisionDamageRatio=2.0f
SpringBoardTrapMinimumCollisionVelocity=0.0f

;; Airblast specific collision parameters
AirBlastCollisionDamageRatio=2.0f
AirBlastMinimumCollisionVelocity=0.0f

FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f

; defaults for ragdoll bone rigid bodies (NOT the constraints)
RagdollAngularDamping=0.5
RagdollLinearDamping=0.5
RagdollFriction=0.5

[Atlas]
BaseDamageReactionSpeed=3.0f
MaxDamageReactionSpeed=50.0f
MinimumCollisionVelocity=0.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
CollisionDamageRatio=1.0f
SkeletalMass=100.0f


;All aggressors use this entry
[AggressorBabyJane]
BaseDamageReactionSpeed=8.0f
MaxDamageReactionSpeed=50.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=1.0f
TelekinesisCollisionDamageRatio=5.5f
SpringBoardTrapCollisionDamageRatio=7.0f
AirBlastCollisionDamageRatio=4.5f
SkeletalMass=100.0f


[GathererGirl]
BaseDamageReactionSpeed=5.0f
MaxDamageReactionSpeed=50.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=1.000f
SkeletalMass=50.0f

[ProtectorBouncer]
BaseDamageReactionSpeed=5.0f
MaxDamageReactionSpeed=15.0f
FallingCollisionMinimumHitVelocity=2.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=1.0f
TelekinesisCollisionDamageRatio=15f
TelekinesisCollisionDamageMaximum=350.0f
SpringBoardTrapCollisionDamageRatio=2.0f
SkeletalMass=250.0f
; more friction on protectors so they seem heavier when dead
RagdollFriction=1

[NewProtectorBouncer]
BaseDamageReactionSpeed=5.0f
MaxDamageReactionSpeed=15.0f
FallingCollisionMinimumHitVelocity=2.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=2.0f
TelekinesisCollisionDamageRatio=15f
TelekinesisCollisionDamageMaximum=350.0f
SpringBoardTrapCollisionDamageRatio=2.0f
SkeletalMass=250.0f
; more friction on protectors so they seem heavier when dead
RagdollFriction=1

[ProtectorRosie]
BaseDamageReactionSpeed=5.0f
MaxDamageReactionSpeed=15.0f
FallingCollisionMinimumHitVelocity=2.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=2.0f
TelekinesisCollisionDamageRatio=15f
TelekinesisCollisionDamageMaximum=350.0f
SpringBoardTrapCollisionDamageRatio=2.0f
SkeletalMass=250.0f
; more friction on protectors so they seem heavier when dead
RagdollFriction=1

[SecurityBot]
BaseDamageReactionSpeed=2.8f
MaxDamageReactionSpeed=50.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=1.000f
TelekinesisCollisionDamageRatio=6.0f
SpringBoardTrapCollisionDamageRatio=7.0f
AirBlastCollisionDamageRatio=4.5f
SkeletalMass=70.0f

[TurretFlameThrower]
BaseDamageReactionSpeed=3.0f
MaxDamageReactionSpeed=15.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
TelekinesisCollisionDamageRatio=4.0f
CollisionDamageRatio=1.000f
SkeletalMass=100.0f

[TurretMachineGun]
BaseDamageReactionSpeed=3.0f
MaxDamageReactionSpeed=20.0f
FallingCollisionMinimumHitVelocity=4.0f
FallingCollisionMaximumReTriggerPeriod=1.0f
FallingCollisionLODRadius=3000.0f
MinimumCollisionVelocity=0.0f
CollisionDamageRatio=1.000f
TelekinesisCollisionDamageRatio=4.0f
SkeletalMass=100.0f


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Character Proxy Physics
;;
;;  A character proxy is the invisible "shell" around AIs and the
;;  player that push physics objects out of the way when they penetrate
;;  the shell. This behavior is different from object-object 
;;  physical interactions because forces are constantly applied 
;;  by the proxy until the objects exit the shell (as opposed to
;;  the instantaneous momentum transfer that happens in a normal
;;  rigidbody-rigidbody physics interaction).
;;
;;  Proxies need to impart momentum to reactive actors to prevent 
;;  interpenetration. However, because the way in which character
;;  proxies impart force is different from the way weapons do it,
;;  the values set for MomentumScale, ReferenceMass, and the other
;;  variables below will be much different for the weapon-related
;;  values (set above). The momentum imparted by character proxies
;;  is simply intended to prevent interpenetration of a reactive actor 
;;  with the proxy, so we only need to impart enough momentum to move 
;;  the reactive actor out of the proxy -- but not so much that the 
;;  actor is thrown around the level. 
;;
;;  To achieve this, the maximum resultant speed should be much LOWER
;;  than when the momentum is imparted by a weapon.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[CharacterProxy]

; This is a player specific value for the player's character proxy and
; defines how much the player can push
PlayerHavokStrength=60000.0f

; This will be what the player's character proxy's mass will be set to
; Set to 0 for infinite mass
PlayerHavokMass=2000.0f

; To prevent the player from kicking objects lying on the ground, we 
; define a threshold height to filter out any low lying objects. There 
; are two thresholds: one for when the player is standing normally, 
; and one for when the player is crouching. The thresholds are defined 
; as fractions of the players total height. This means that if the player 
; height changes for any reason, these numbers should still remain valid. 
; The thresholds are measured from the bottom of the proxy. 
PlayerStandingTerrainThreshold=0.2
PlayerCrouchingTerrainThreshold=0.3

MomentumScale=0.5f
ReferenceMass=1000.0f
MaximumSpeedOfReferenceMass=0.1f
MaximumSpeedOfAnyObject=1.0f

